{
  "version": 3,
  "sources": ["../keystone.ts", "../schemas/user.ts", "../schemas/event.ts", "../schemas/event-doc.ts", "../schema.ts", "../auth.ts"],
  "sourcesContent": ["import dotenv from \"dotenv\";\nimport { config } from \"@keystone-6/core\";\nimport { lists } from \"./schema\";\nimport { withAuth, session } from \"./auth\";\n\ndotenv.config();\n\nexport default withAuth(\n  config({\n    db: {\n      provider: \"postgresql\" as const,\n      url: process.env.DB_CONNSTR!,\n    },\n    lists,\n    session,\n    telemetry: false,\n  })\n);\n", "import { list } from \"@keystone-6/core\";\r\nimport { allowAll } from \"@keystone-6/core/access\";\r\nimport { text, password, timestamp, checkbox } from \"@keystone-6/core/fields\";\r\nimport type { Lists } from \".keystone/types\";\r\n\r\nexport const User: NonNullable<Lists[\"User\"]> = list({\r\n  access: {\r\n    operation: {\r\n      query: allowAll,\r\n      create: ({ session }) => session?.data.isAdmin,\r\n      update: ({ session }) => session?.data.isAdmin,\r\n      delete: ({ session }) => session?.data.isAdmin,\r\n    },\r\n  },\r\n  fields: {\r\n    name: text({ validation: { isRequired: true } }),\r\n    username: text({\r\n      validation: { isRequired: true },\r\n      isIndexed: \"unique\",\r\n    }),\r\n    password: password({ validation: { isRequired: true } }),\r\n    isAdmin: checkbox({\r\n      defaultValue: false,\r\n    }),\r\n    createdAt: timestamp({\r\n      defaultValue: { kind: \"now\" },\r\n      ui: {\r\n        itemView: {\r\n          fieldMode: \"read\",\r\n        },\r\n      },\r\n    }),\r\n  },\r\n});\r\n", "import { list } from \"@keystone-6/core\";\r\nimport { relationship, text, timestamp } from \"@keystone-6/core/fields\";\r\nimport { allowAll } from \"@keystone-6/core/access\";\r\n\r\nexport const Event = list({\r\n  access: {\r\n    operation: {\r\n      query: allowAll,\r\n      create: ({ session }) => session?.data.isAdmin,\r\n      delete: ({ session }) => session?.data.isAdmin,\r\n      update: () => true,\r\n    },\r\n    item: {\r\n      update: async ({ session, item, context }) => {\r\n        if (session?.data.isAdmin) return true;\r\n\r\n        const { managers } = (await context.query.Event.findOne({\r\n          where: { id: item.id as string },\r\n          query: \"managers { id }\",\r\n        })) as { managers: { id: string }[] };\r\n\r\n        if (managers.some((manager) => manager.id === session?.data.id))\r\n          return true;\r\n\r\n        return false;\r\n      },\r\n    },\r\n  },\r\n  fields: {\r\n    label: text({ validation: { isRequired: true } }),\r\n    date: timestamp({\r\n      validation: { isRequired: true },\r\n      defaultValue: { kind: \"now\" },\r\n    }),\r\n    managers: relationship({ ref: \"User\", many: true }),\r\n    docs: relationship({ ref: \"EventDoc.event\", many: true }),\r\n  },\r\n});\r\n", "import { list } from \"@keystone-6/core\";\r\nimport { relationship, text } from \"@keystone-6/core/fields\";\r\nimport { allowAll } from \"@keystone-6/core/access\";\r\nimport { document } from \"@keystone-6/fields-document\";\r\n\r\nexport const EventDoc = list({\r\n  access: {\r\n    operation: {\r\n      query: allowAll,\r\n      create: () => true,\r\n      delete: () => true,\r\n      update: () => true,\r\n    },\r\n    item: {\r\n      update: async ({ session, item, context }) => {\r\n        if (session?.data.isAdmin) return true;\r\n\r\n        const { managers } = (await context.query.Event.findOne({\r\n          where: { id: item.eventId as string },\r\n          query: \"managers { id }\",\r\n        })) as { managers: { id: string }[] };\r\n\r\n        if (managers.some((manager) => manager.id === session?.data.id))\r\n          return true;\r\n\r\n        return false;\r\n      },\r\n    },\r\n  },\r\n  fields: {\r\n    label: text({ validation: { isRequired: true } }),\r\n    document: document({\r\n      formatting: true,\r\n      dividers: true,\r\n    }),\r\n    event: relationship({\r\n      ref: \"Event.docs\",\r\n      many: false,\r\n      ui: { hideCreate: true },\r\n    }),\r\n  },\r\n});\r\n", "import { User } from \"./schemas/user\";\nimport { Event } from \"./schemas/event\";\nimport { EventDoc } from \"./schemas/event-doc\";\nimport type { Lists } from \".keystone/types\";\n\nexport const lists: Lists = {\n  User,\n  Event,\n  EventDoc,\n};\n", "import { randomBytes } from \"crypto\";\nimport { createAuth } from \"@keystone-6/auth\";\nimport { statelessSessions } from \"@keystone-6/core/session\";\n\nlet sessionSecret = process.env.SESSION_SECRET;\nif (!sessionSecret && process.env.NODE_ENV !== \"production\") {\n  sessionSecret = randomBytes(32).toString(\"hex\");\n}\n\nconst { withAuth } = createAuth({\n  listKey: \"User\",\n  identityField: \"username\",\n  sessionData: \"id name isAdmin\",\n  secretField: \"password\",\n  // initFirstItem is run when there are no users and will run in sudo context!\n  // remove in production\n  // initFirstItem: {\n  //   fields: [\"name\", \"username\", \"password\"],\n  //   itemData: {\n  //     isAdmin: true,\n  //   },\n  // },\n});\n\nconst sessionMaxAge = 60 * 60 * 24 * 30;\nconst session = statelessSessions({\n  maxAge: sessionMaxAge,\n  secret: sessionSecret!,\n});\n\nexport { withAuth, session };\n"],
  "mappings": "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",
  "names": ["import_core", "session", "import_core", "import_fields", "import_access", "session", "import_core", "import_fields", "import_access", "session", "dotenv"]
}
